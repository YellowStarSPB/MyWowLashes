basePath: /api
definitions:
  domain.GetAllUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/domain.GetAllUsersUser'
        type: array
    type: object
  domain.GetAllUsersUser:
    properties:
      calls:
        example:
        - vk:nah
        items:
          type: string
        type: array
      email:
        example: banan@mail.ru
        type: string
      orderId:
        example: 1
        type: integer
      username:
        example: OLEG
        type: string
    type: object
  domain.GetCalendarResponse:
    properties:
      current:
        items:
          $ref: '#/definitions/domain.GetCalendarTicket'
        type: array
      error:
        example: Pasha sasat
        type: string
      next:
        items:
          $ref: '#/definitions/domain.GetCalendarTicket'
        type: array
    type: object
  domain.GetCalendarTicket:
    properties:
      day:
        example: 1
        type: integer
      times:
        example:
        - '[''10:30'''
        - ' ''16:30'']'
        items:
          type: string
        type: array
    type: object
  domain.GetOrderByIdResponse:
    properties:
      Description:
        example: описание
        type: string
      status:
        example: waiting
        type: string
      time:
        example: 10.03.2023,10:30PM
        type: string
      userId:
        example: 1
        type: integer
    type: object
  domain.GetPhotoByIdResponse:
    properties:
      hidden:
        example: true
        type: boolean
      imagename:
        example: "1"
        type: string
      servicesId:
        example: 1
        type: integer
      url:
        example: "1"
        type: string
    type: object
  domain.GetServicesByIdResponse:
    properties:
      hidden:
        example: false
        type: boolean
      photoId:
        example: 1
        type: integer
      price:
        example: 1000
        type: integer
      type:
        example: long
        type: string
    type: object
  domain.GetUserByIdResponse:
    properties:
      calls:
        example:
        - "9833211233212"
        items:
          type: string
        type: array
      email:
        example: banan@mail.ru
        type: string
      orderId:
        example: 1
        type: integer
      userName:
        example: OLEG
        type: string
    type: object
  domain.PostOrderRequest:
    properties:
      description:
        example: описание
        type: string
      status:
        example: pending
        type: string
      time:
        example: "2023-01-02T10:30:00Z"
        type: string
      userId:
        example: 1
        type: integer
    type: object
  domain.PostOrderResponse:
    properties:
      orderId:
        example: 1
        type: integer
    type: object
  domain.PostOrderUpdateRequest:
    properties:
      orderId:
        example: 1
        type: integer
      status:
        example: accepted
        type: string
    type: object
  domain.PostOrderUpdateResponse:
    properties:
      error: {}
      statusOk:
        example: true
        type: boolean
    type: object
  domain.PostPhotoRequest:
    properties:
      hidden:
        example: true
        type: boolean
      imagename:
        example: "1"
        type: string
      servicesId:
        example: 1
        type: integer
      url:
        example: "1"
        type: string
    type: object
  domain.PostPhotoResponse:
    properties:
      photoId:
        example: 1
        type: integer
    type: object
  domain.PostRecordRequest:
    properties:
      call:
        example: vk:nah
        type: string
      description:
        example: описание
        type: string
      email:
        example: banan@mail.ru
        type: string
      status:
        example: pending
        type: string
      time:
        example: "2023-01-02T10:30:00Z"
        type: string
      userName:
        example: OLEG
        type: string
    type: object
  domain.PostRecordResponse:
    properties:
      error: {}
      statusOk:
        example: true
        type: boolean
    type: object
  domain.PostServicesRequest:
    properties:
      hidden:
        example: false
        type: boolean
      photoId:
        example: 1
        type: integer
      price:
        example: 1000
        type: integer
      type:
        example: long
        type: string
    type: object
  domain.PostServicesResponse:
    properties:
      servicesId:
        example: 1
        type: integer
    type: object
  domain.PostUserRequest:
    properties:
      call:
        example: vk:nah
        type: string
      email:
        example: banan@mail.ru
        type: string
      orderId:
        example: 1
        type: integer
      userName:
        example: OLEG
        type: string
    type: object
  domain.PostUserResponse:
    properties:
      userId:
        example: 1
        type: integer
    type: object
info:
  contact: {}
  description: This is a Kate server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Kate Shop testing API
  version: "0.1"
paths:
  /admin/calendar:
    get:
      consumes:
      - application/json
      description: Get calendar from database
      parameters:
      - description: start date
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.GetCalendarResponse'
      summary: Get calendar
      tags:
      - Calendar
  /admin/order:
    get:
      consumes:
      - application/json
      description: get order ID by ID
      parameters:
      - description: place here order ID
        in: query
        name: orderId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.GetOrderByIdResponse'
      summary: Get order ID
      tags:
      - Order
    post:
      consumes:
      - application/json
      description: Insert new order
      parameters:
      - description: place here order ID
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/domain.PostOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.PostOrderResponse'
      summary: Post order
      tags:
      - Order
  /admin/orderupdate:
    post:
      consumes:
      - application/json
      description: Insert update order
      parameters:
      - description: update order
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/domain.PostOrderUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.PostOrderUpdateResponse'
      summary: Post orderupdate
      tags:
      - Order
  /admin/photo:
    get:
      consumes:
      - application/json
      description: get photo ID by ID
      parameters:
      - description: place here photo ID
        in: query
        name: photoId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.GetPhotoByIdResponse'
      summary: Get photo ID
      tags:
      - Photo
    post:
      consumes:
      - application/json
      description: Insert new photo
      parameters:
      - description: place here photo ID
        in: body
        name: rquestBody
        required: true
        schema:
          $ref: '#/definitions/domain.PostPhotoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.PostPhotoResponse'
      summary: Post photo
      tags:
      - Photo
  /admin/record:
    post:
      consumes:
      - application/json
      description: Insert new record
      parameters:
      - description: place here  ID
        in: body
        name: rquestBody
        required: true
        schema:
          $ref: '#/definitions/domain.PostRecordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.PostRecordResponse'
      summary: Post record
      tags:
      - Record
  /admin/services:
    get:
      consumes:
      - application/json
      description: get services ID by ID
      parameters:
      - description: place here services ID
        in: query
        name: servicesId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.GetServicesByIdResponse'
      summary: Get services ID
      tags:
      - Services
    post:
      consumes:
      - application/json
      description: Insert new services
      parameters:
      - description: place here services ID
        in: body
        name: rquestBody
        required: true
        schema:
          $ref: '#/definitions/domain.PostServicesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.PostServicesResponse'
      summary: Post services
      tags:
      - Services
  /admin/user:
    get:
      consumes:
      - application/json
      description: get user ID by ID
      parameters:
      - description: place here user ID
        in: query
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.GetUserByIdResponse'
      summary: Get user ID
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Insert new user
      parameters:
      - description: place here user ID
        in: body
        name: rquestBody
        required: true
        schema:
          $ref: '#/definitions/domain.PostUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.PostUserResponse'
      summary: Post user
      tags:
      - Users
  /admin/users:
    get:
      consumes:
      - application/json
      description: get users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.GetAllUsersResponse'
      summary: Get Users
      tags:
      - Users
swagger: "2.0"
